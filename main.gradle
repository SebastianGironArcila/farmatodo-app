// build.gradle (raiz)

apply plugin: 'info.solidsoft.pitest.aggregator'

allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    // Si usas la tarea validateStructure del plugin de arquitectura
    compileJava.dependsOn validateStructure

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.13.RELEASE'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    // Flags para JDK 13+ en tests
    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += ["-XX:+AllowRedefinitionToAddDeleteMethods"]
        }
    }

    // Reporte de cobertura por modulo
    jacocoTestReport {
        dependsOn test, 'pitest'
        reports {
            xml.required.set(true)
            xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco.xml"))
            csv.required.set(false)
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacocoHtml"))
        }
    }

    // VerificaciÃ³n de cobertura: falla si baja del umbral
    tasks.named('jacocoTestCoverageVerification') {
        dependsOn test

        // Excluir clases que no aportan a la cobertura
        classDirectories.setFrom(
                files(sourceSets.main.output).asFileTree.matching {
                    exclude(
                            'co/com/farmatodo/MainApplication*',
                            '**/api/config/**',
                            '**/api/mapper/**',
                            '**/api/security/**',
                            '**/api/dto/**'
                    )
                }
        )
        sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)

        // Soporta .exec y .ec
        executionData.setFrom fileTree(buildDir).include('jacoco/*.exec', 'jacoco/*.ec')

        violationRules {
            rule {
                element = 'BUNDLE'
                // Line coverage minimo 80%
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }
                // Branch coverage minimo 70% (opcional)
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.70
                }
            }
        }
    }

    // Ejecuta reporte despues de los tests
    test.finalizedBy(project.tasks.jacocoTestReport)

    // Hace que el build falle si no se cumple el umbral
    tasks.named('check') {
        dependsOn 'jacocoTestCoverageVerification'
    }

    // Config PIT
    pitest {
        targetClasses = ['co.com.farmatodo.*']
        excludedClasses = []
        excludedTestClasses = []
        pitestVersion = '1.20.1'
        verbose = false
        outputFormats = ['XML', 'HTML']
        threads = 8
        exportLineCoverage = true
        useClasspathFile = true
        timestampedReports = false
        //mutators = ['STRONGER', 'DEFAULTS']
        fileExtensionsToFilter.addAll('xml', 'orbit')
        junit5PluginVersion = '1.2.2'
        failWhenNoMutations = false
        jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

// Reporte de cobertura combinado de todos los modulos
tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn subprojects.test, subprojects.jacocoTestReport, pitestReportAggregate

    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)

    classDirectories.setFrom files(subprojects.sourceSets.main.output).collect {
        fileTree(dir: it, exclude: [
                'co/com/farmatodo/MainApplication.java',
                '**/api/config/**/*',
                '**/api/mapper/**/*',
                '**/api/security/**/*',
                '**/api/dto/**/*'
        ])
    }

    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec', '**/build/jacoco/*.ec')

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

// Flags para MapStruct (si aplica)
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ['-Amapstruct.suppressGeneratorTimestamp=true']
}

// Consolidar reportes de PIT en un mutations.xml en el root build/reports/pitest
pitestReportAggregate {
    doLast {
        def reportDir = layout.buildDirectory.dir("reports/pitest").get().asFile
        reportDir.mkdirs()
        def consolidatedReport = new File(reportDir, 'mutations.xml')
        consolidatedReport.withWriter { writer ->
            writer.write("<mutations>\n")
            subprojects.each { subproject ->
                def xmlReport = subproject.layout.buildDirectory.file("reports/pitest/mutations.xml").get().asFile
                if (xmlReport.exists()) {
                    def xmlContent = xmlReport.text
                    xmlContent = xmlContent.replaceAll("<\\?xml[^>]*>", "")
                    xmlContent = xmlContent.replaceAll("</?mutations( partial=\"true\")?>", "")
                    writer.write(xmlContent.trim() + "\n")
                }
            }
            writer.write("</mutations>")
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = '8.14.3'
}



