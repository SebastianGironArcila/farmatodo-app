name: CI CD Cloud Run H2

on:
  push:
    branches: [ "develop", "master" ]

env:
  PROJECT_ID: farmatodo-cicd-project
  GAR_LOCATION: us-central1
  REPOSITORY_NAME: prueba-tecnica-repo
  IMAGE_NAME: java-app
  SERVICE_NAME_DEV: java-api-service-dev
  SERVICE_NAME_PROD: java-api-service

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build, Test, Coverage and Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests and coverage
        run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification

      - name: Generate merged coverage report
        run: ./gradlew jacocoMergedReport

      - name: Upload merged coverage report (JaCoCo)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-merged-report
          path: build/reports/jacocoMergedReport/html/**
          retention-days: 7
          compression-level: 6
          if-no-files-found: ignore

      - name: Google Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/578301564702/locations/global/workloadIdentityPools/farmatodo-actions-pool/providers/github-provider'
          service_account: 'github-actions-builder@farmatodo-cicd-project.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Verify gcloud identity
        run: |
          gcloud config get-value project
          gcloud auth list

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Build and push image
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" --file deployment/Dockerfile .
          docker push "$IMAGE"

  deploy-dev:
    name: Deploy to Cloud Run (dev)
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/578301564702/locations/global/workloadIdentityPools/farmatodo-actions-pool/providers/github-provider'
          service_account: 'github-actions-builder@farmatodo-cicd-project.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Verify env file exists (dev)
        run: |
          test -f deployment/env.dev.yaml && echo "Found deployment/env.dev.yaml" || (echo "Missing deployment/env.dev.yaml" && exit 1)

      - name: Deploy (dev, H2, 1 instance, concurrency 1)
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          gcloud run deploy ${{ env.SERVICE_NAME_DEV }} \
            --image "$IMAGE" \
            --region ${{ env.GAR_LOCATION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --concurrency 1 \
            --cpu 1 \
            --memory 512Mi \
            --timeout 300 \
            --min-instances 0 \
            --max-instances 1 \
            --env-vars-file deployment/env.dev.yaml \
            --quiet

      - name: Smoke test (dev)
        shell: bash
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME_DEV }} --region ${{ env.GAR_LOCATION }} --format='value(status.url)')
          echo "Smoke test -> $URL/actuator/health"
          for i in {1..24}; do
            RESP=$(curl -fsS --max-time 5 "$URL/actuator/health" || true)
            if echo "$RESP" | tr -d ' \n' | grep -q '"status":"UP"'; then
              echo "Dev is UP"; exit 0; fi
            echo "Not ready yet... retry $i/24"; sleep 5
          done
          echo "Dev not healthy"; echo "$RESP"; exit 1

  deploy-prod:
    name: Deploy to Cloud Run (prod)
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/578301564702/locations/global/workloadIdentityPools/farmatodo-actions-pool/providers/github-provider'
          service_account: 'github-actions-builder@farmatodo-cicd-project.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Verify env file exists (prod)
        run: |
          test -f deployment/env.prod.yaml && echo "Found deployment/env.prod.yaml" || (echo "Missing deployment/env.prod.yaml" && exit 1)

      - name: Deploy (prod, H2, 1 instance, concurrency 1)
        run: |
          IMAGE="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          gcloud run deploy ${{ env.SERVICE_NAME_PROD }} \
            --image "$IMAGE" \
            --region ${{ env.GAR_LOCATION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --concurrency 1 \
            --cpu 1 \
            --memory 512Mi \
            --timeout 300 \
            --min-instances 0 \
            --max-instances 1 \
            --env-vars-file deployment/env.prod.yaml \
            --quiet

      - name: Smoke test (prod)
        shell: bash
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME_PROD }} --region ${{ env.GAR_LOCATION }} --format='value(status.url)')
          echo "Smoke test -> $URL/actuator/health"
          for i in {1..24}; do
            RESP=$(curl -fsS --max-time 5 "$URL/actuator/health" || true)
            if echo "$RESP" | tr -d ' \n' | grep -q '"status":"UP"'; then
              echo "Prod is UP"; exit 0; fi
            echo "Not ready yet... retry $i/24"; sleep 5
          done
          echo "Prod not healthy"; echo "$RESP"; exit 1


